import { render, screen, cleanup } from '@testing-library/react'
import userEvent from '@testing-library/user-event'

import { Provider } from 'react-redux'
import store from '../store'




import ColorSelector from './ColorSelector'

describe('color selector renders.', () => {
    test('Title is visible', () => {
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const title = screen.queryByTestId('color-title')
        expect(title).toBeInTheDocument()
    })
    test('Left picker button is visible if left color is defined.', () => {
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const button = screen.queryByTestId('pick-left')
        expect(button).toBeInTheDocument()
    })
    test('Right picker button is visible if right color is defined.', () => {
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const button = screen.queryByTestId('pick-right')
        expect(button).toBeInTheDocument()
    })
    test('color switcher is visible if colors and setters are defined', () => {
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const button = screen.queryByTestId('color-switcher')
        expect(button).toBeInTheDocument()
    })
    test('Left picker button is not visible if left color is not defined.', () => {
        render(<ColorSelector leftColor={null} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        let button = screen.queryByTestId('pick-left')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={undefined} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        button = screen.queryByTestId('pick-left')
        expect(button).not.toBeInTheDocument()
    })
    test('Right picker button is not visible if right color is not defined.', () => {
        render(<ColorSelector leftColor={'#ffffff'} rightColor={null} setLeftColor={() => {}} setRightColor={() => {}} />)
        let button = screen.queryByTestId('pick-right')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={undefined} setLeftColor={() => {}} setRightColor={() => {}} />)
        button = screen.queryByTestId('pick-right')
        expect(button).not.toBeInTheDocument()
    })
    test('Color switch is not visible if colors or their setters are not defined.', () => {
        render(<ColorSelector leftColor={null} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        let button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={undefined} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={() => {}} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={null} setLeftColor={() => {}} setRightColor={() => {}} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={undefined} setLeftColor={() => {}} setRightColor={() => {}} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()

        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={null} setRightColor={() => {}} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={undefined} setRightColor={() => {}} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={null} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
        cleanup()
        render(<ColorSelector leftColor={'#ffffff'} rightColor={'#000000'} setLeftColor={() => {}} setRightColor={undefined} />)
        button = screen.queryByTestId('color-switcher')
        expect(button).not.toBeInTheDocument()
    })
    test('left picker is color with the provided left color.', () => {
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const leftPicker = screen.getByTestId('pick-left')
        const style = getComputedStyle(leftPicker)
        expect(style.backgroundColor).toBe('rgb(123, 231, 132)')
    })
    test('left picker is color with the provided left color.', () => {
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const leftPicker = screen.getByTestId('pick-right')
        const style = getComputedStyle(leftPicker)
        expect(style.backgroundColor).toBe('rgb(132, 231, 123)')
    })
    test('Color wheel is not visible by default.', () => {
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const colorWheel = screen.queryByTestId('color-wheel')
        expect(colorWheel).not.toBeInTheDocument()
    })
})

describe('Color picker is functional.', () => {
    test('Clicking left picker when colors and setters are defined opens color wheel.', async () => {
        const user = userEvent.setup()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const button = screen.getByTestId('pick-left')
        await user.click(button)
        const colorWheel = screen.queryByTestId('color-wheel')
        expect(colorWheel).toBeInTheDocument()
    })
    test('Clicking right picker when colors and setters are defined opens color wheel.', async () => {
        const user = userEvent.setup()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={() => {}} />)
        const button = screen.getByTestId('pick-right')
        await user.click(button)
        const colorWheel = screen.queryByTestId('color-wheel')
        expect(colorWheel).toBeInTheDocument()
    })
    test('Save button is visible when color wheel is open.', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={() => {}} />)
        const picker = screen.getByTestId('pick-left')
        await user.click(picker)
        const button = screen.queryByTestId('save-color')
        expect(button).toBeInTheDocument()
    })
    test('Cancel button is visible when color wheel is open.', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={() => {}} />)
        const picker = screen.getByTestId('pick-left')
        await user.click(picker)
        const button = screen.queryByTestId('cancel-color')
        expect(button).toBeInTheDocument()
    })
    test('color wheel canvas is visible when color wheel is open', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={() => {}} />)
        const picker = screen.getByTestId('pick-left')
        await user.click(picker)
        const canvas = screen.queryByTestId('color-wheel-canvas')
        expect(canvas).toBeInTheDocument()
    })
    test('Clicking save in color wheel after clicking left picker calls setLeftColor.', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={() => {}} />)
        const picker = screen.getByTestId('pick-left')
        await user.click(picker)
        const button = screen.getByTestId('save-color')
        await user.click(button)
        expect(setLeftColorMock).toHaveBeenCalledTimes(1)
    })
    test('Clicking save in color wheel after clicking right picker calls setRightColor.', async () => {
        const user = userEvent.setup()
        const setRightColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={() => {}} setRightColor={setRightColorMock} />)
        const picker = screen.getByTestId('pick-right')
        await user.click(picker)
        const button = screen.getByTestId('save-color')
        await user.click(button)
        expect(setRightColorMock).toHaveBeenCalledTimes(1)
    })
    test('Clicking cancel in color wheel does not call any setter', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        const setRightColorMock = vi.fn()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={setRightColorMock} />)
        let picker = screen.getByTestId('pick-left')
        await user.click(picker)
        let button = screen.getByTestId('cancel-color')
        await user.click(button)
        cleanup()
        render(<ColorSelector leftColor={'rgb(123, 231, 132)'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={setRightColorMock} />)
        picker = screen.getByTestId('pick-right')
        await user.click(picker)
        button = screen.getByTestId('cancel-color')
        await user.click(button)
        expect(setLeftColorMock).toHaveBeenCalledTimes(0)
        expect(setRightColorMock).toHaveBeenCalledTimes(0)
    })
    test('clicking color wheel canvas and then save calls setters with a color from the canvas.', async () => {
        const user = userEvent.setup()
        const setLeftColorMock = vi.fn()
        render(<ColorSelector leftColor={'#123456'} rightColor={'rgb(132, 231, 123)'} setLeftColor={setLeftColorMock} setRightColor={() => {}} />)
        const picker = screen.getByTestId('pick-left')
        await user.click(picker)
        const canvas = screen.getByTestId('color-wheel-canvas')
        await user.pointer({target: canvas, coords: {x: 100, y: 100}, keys: '[MouseLeft]'})
        const save = screen.getByTestId('save-color')
        await user.click(save)
        expect(setLeftColorMock).toHaveBeenCalledTimes(1)
        expect(setLeftColorMock.mock.calls[0][0] !== '#123456')
    })
})